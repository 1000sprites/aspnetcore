@using Microsoft.AspNetCore.Components.Virtualization

<p>
    Item size:<br />
    <input type="number" @bind-value="itemSize" />
</p>

<p>
    Stacked lists (fixed):<br />
    <div style="background-color: #eee; height: 500px; overflow-y: auto">
        <VirtualizeFixed Items="@fixedItems" ItemSize="itemSize">
            <div @key="@context" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
        </VirtualizeFixed>
        <VirtualizeFixed Items="@fixedItems" ItemSize="itemSize">
            <div @key="@context" style="height: @(itemSize)px; background-color: rgb(0, @((context % 2) * 255), @((1-(context % 2)) * 255));">Item @context</div>
        </VirtualizeFixed>
    </div>
</p>

<p>
    Infinite scrolling (asynchronously loaded):<br />
    <div style="background-color: #eee; height: 500px; overflow-y: auto">
        <InfiniteScroll ItemsProvider="GetItemsAsync" ItemSize="itemSize">
            <Item>
                <div @key="@context" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
            </Item>
            <Footer>
                <div style="height: @(itemSize)px; background-color: white;">
                    Loading...
                </div>
            </Footer>
        </InfiniteScroll>
    </div>
</p>

<p>
    Infinite scrolling (synchronously loaded):<br />
    <div style="background-color: #eee; height: 500px; overflow-y: auto">
        <InfiniteScroll ItemsProvider="GetSingleItem" ItemSize="itemSize">
            <Item>
                <div @key="@context" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
            </Item>
            <Footer>
                <div style="height: @(itemSize)px; background-color: white;">
                    Loading...
                </div>
            </Footer>
        </InfiniteScroll>
    </div>
</p>

<p>
    Deferred:<br />
    <div style="background-color: #eee; height: 500px; overflow-y: auto">
        <VirtualizeDeferred ItemsProvider="GetLimitedItemsAsync" ItemSize="itemSize">
            <Item>
                <div @key="@context" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
            </Item>
            <Placeholder>
                <div @key="@($"placeholder-{context}")" style="height: @(itemSize)px;">Loading...</div>
            </Placeholder>
        </VirtualizeDeferred>
    </div>
</p>

<p>
    Viewport as root (fixed):<br />
    <VirtualizeFixed Items="@fixedItems" ItemSize="itemSize">
        <div @key="@context" style="height: @(itemSize)px; background-color: rgb(@((context % 2) * 255), @((1-(context % 2)) * 255), 255);">Item @context</div>
    </VirtualizeFixed>
    <VirtualizeFixed Items="@fixedItems" ItemSize="itemSize">
        <div @key="@context" style="height: @(itemSize)px; background-color: rgb(0, @((context % 2) * 255), @((1-(context % 2)) * 255));">Item @context</div>
    </VirtualizeFixed>
</p>

@code {
    float itemSize = 100;
    ICollection<int> fixedItems = Enumerable.Range(0, 1000).ToList();

    int itemCountLimit = 200;

    async Task<IEnumerable<int>> GetItemsAsync(int startIndex)
    {
        await Task.Delay(500);

        return Enumerable.Range(startIndex, 50);
    }

    async Task<ItemsProviderResult<int>> GetLimitedItemsAsync(int startIndex, int count)
    {
        await Task.Delay(500);

        return new ItemsProviderResult<int>(Enumerable.Range(startIndex, count), itemCountLimit);
    }

    Task<IEnumerable<int>> GetSingleItem(int index)
    {
        return Task.FromResult(Enumerable.Repeat(index, 1));
    }
}
